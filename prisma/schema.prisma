generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL_DEMO")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id               String           @id @default(uuid()) @db.Uuid
  email            String           @unique @db.VarChar(50)
  password         String           @db.VarChar(50)
  username         String           @db.VarChar(50)
  id_Role          String           @db.Uuid
  Favorite         Favorite[]
  Assessment       Assessment[]
  Bar              Bar[]
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  groupMembers     GroupMember[]
  Role             Role             @relation(fields: [id_Role], references: [id])
  id                               String         @id @default(uuid()) @db.Uuid
  email                            String         @unique @db.VarChar(50)
  password                         String         @db.VarChar(300)
  username                         String         @db.VarChar(50)
  id_Role                          String         @db.Uuid
  Assessment                       Assessment[]
  Bar                              Bar[]
  Favorite                         Favorite[]
  GroupMember                      GroupMember[]
  Message_Message_receiverIdToUser Message[]      @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[]      @relation("Message_senderIdToUser")
  Subscription                     Subscription[]
  Role                             Role           @relation(fields: [id_Role], references: [id])
  Conversation                     Conversation[] @relation("UserConversations")
  Friendships                      Friendship[]   @relation("UserFriendships")
  Friends                          Friendship[]   @relation("FriendFriendships")
}

model Bar {
  id            String       @id @default(uuid()) @db.Uuid
  name          String       @db.VarChar(50)
  description   String       @db.VarChar(250)
  happyHoure    String       @db.VarChar(50)
  localisationX Float
  localisationY Float
  id_User       String       @db.Uuid
  Assessment    Assessment[]
  User          User         @relation(fields: [id_User], references: [id])
  Event         Event[]
  Favorite      Favorite[]
}

model Event {
  id           String         @id @default(uuid()) @db.Uuid
  dateHour     DateTime       @db.Timestamp(6)
  title        String         @db.VarChar(50)
  description  String         @db.VarChar(250)
  category     String         @db.VarChar(250)
  id_Bar       String         @db.Uuid
  Bar          Bar            @relation(fields: [id_Bar], references: [id])
  Subscription Subscription[]
}

model Role {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(50)
  User User[]
}

model Favorite {
  id      String @id @default(uuid()) @db.Uuid
  id_User String @db.Uuid
  id_Bar  String @db.Uuid
  Bar     Bar    @relation(fields: [id_Bar], references: [id])
  User    User   @relation(fields: [id_User], references: [id])
}

model Assessment {
  id      String @id @default(uuid()) @db.Uuid
  note    Int
  comment String @db.VarChar(50)
  id_User String @db.Uuid
  id_Bar  String @db.Uuid
  Bar     Bar    @relation(fields: [id_Bar], references: [id])
  User    User   @relation(fields: [id_User], references: [id])
  Bar     Bar    @relation(fields: [id_Bar], references: [id])
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  createdAt      DateTime     @default(now())
  senderId       String       @db.Uuid
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  groupId        Int?
  group          Group?       @relation(fields: [groupId], references: [id])
  receiverId     String?      @db.Uuid
  receiver       User?        @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  messages    Message[]
  members     GroupMember[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id])
  role      String   @default("MEMBER") // ADMIN, MEMBER
  joinedAt  DateTime @default(now())

  @@unique([userId, groupId])
}
