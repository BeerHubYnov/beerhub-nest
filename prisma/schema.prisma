generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL_DEMO")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL_DEMO")
}

model User {
  id                               String         @id @default(uuid()) @db.Uuid
  email                            String         @unique @db.VarChar(50)
  password                         String         @db.VarChar(300)
  username                         String         @db.VarChar(50)
  id_Role                          String         @db.Uuid
  Assessment                       Assessment[]
  Bar                              Bar[]
  Favorite                         Favorite[]
  GroupMember                      GroupMember[]
  Message_Message_receiverIdToUser Message[]      @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[]      @relation("Message_senderIdToUser")
  Subscription                     Subscription[]
  Role                             Role           @relation(fields: [id_Role], references: [id])
  Conversation                     Conversation[] @relation("UserConversations")
  Friendships                      Friendship[]   @relation("UserFriendships")
  Friends                          Friendship[]   @relation("FriendFriendships")
}

model Bar {
  id            String       @id @default(uuid()) @db.Uuid
  name          String       @db.VarChar(50)
  description   String       @db.VarChar(250)
  happyHoure    String       @db.VarChar(50)
  localisationX Float
  localisationY Float
  id_User       String       @db.Uuid
  Assessment    Assessment[]
  User          User         @relation(fields: [id_User], references: [id])
  Event         Event[]
  Favorite      Favorite[]
}

model Event {
  id           String         @id @default(uuid()) @db.Uuid
  dateHour     DateTime       @db.Timestamp(6)
  title        String         @db.VarChar(50)
  description  String         @db.VarChar(250)
  category     String         @db.VarChar(250)
  id_Bar       String         @db.Uuid
  Bar          Bar            @relation(fields: [id_Bar], references: [id])
  Subscription Subscription[]
}

model Role {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(50)
  User User[]
}

model Favorite {
  id      String @id @default(uuid()) @db.Uuid
  id_User String @db.Uuid
  id_Bar  String @db.Uuid
  Bar     Bar    @relation(fields: [id_Bar], references: [id])
  User    User   @relation(fields: [id_User], references: [id])
}

model Assessment {
  id      String @id @default(uuid()) @db.Uuid
  note    Int
  comment String @db.VarChar(50)
  id_User String @db.Uuid
  id_Bar  String @db.Uuid
  Bar     Bar    @relation(fields: [id_Bar], references: [id])
  User    User   @relation(fields: [id_User], references: [id])
}

model Subscription {
  id_User     String  @db.Uuid
  id_Evevent  String  @db.Uuid
  isSubscribe Boolean
  Event       Event   @relation(fields: [id_Evevent], references: [id])
  User        User    @relation(fields: [id_User], references: [id])

  @@unique([id_Evevent, id_User])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  Message   Message[]
  User      User[]    @relation("UserConversations")
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  GroupMember GroupMember[]
  Message     Message[]
}

model GroupMember {
  id       Int      @id @default(autoincrement())
  userId   String   @db.Uuid
  groupId  Int
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  Group    Group    @relation(fields: [groupId], references: [id])
  User     User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model Message {
  id                            Int           @id @default(autoincrement())
  content                       String
  createdAt                     DateTime      @default(now())
  senderId                      String        @db.Uuid
  conversationId                Int?
  groupId                       Int?
  receiverId                    String?       @db.Uuid
  Conversation                  Conversation? @relation(fields: [conversationId], references: [id])
  Group                         Group?        @relation(fields: [groupId], references: [id])
  User_Message_receiverIdToUser User?         @relation("Message_receiverIdToUser", fields: [receiverId], references: [id])
  User_Message_senderIdToUser   User          @relation("Message_senderIdToUser", fields: [senderId], references: [id])
}

model Friendship {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  friendId   String   @db.Uuid
  status     String   @default("PENDING") @db.VarChar(20)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User     @relation("UserFriendships", fields: [userId], references: [id])
  Friend     User     @relation("FriendFriendships", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}
